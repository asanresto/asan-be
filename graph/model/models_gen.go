// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type AuthResponse struct {
	AccessToken     string `json:"accessToken"`
	RefreshToken    string `json:"refreshToken"`
	AccessTokenTTL  int    `json:"accessTokenTtl"`
	RefreshTokenTTL int    `json:"refreshTokenTtl"`
}

type ChangePasswordPayload struct {
	CurrentPassword string `json:"currentPassword"`
	NewPassword     string `json:"newPassword"`
	ConfirmPassword string `json:"confirmPassword"`
}

type ChatRoom struct {
	ID string `json:"id"`
}

type FieldFilterInput struct {
	Eq       any `json:"eq,omitempty"`
	Ne       any `json:"ne,omitempty"`
	In       any `json:"in,omitempty"`
	NotIn    any `json:"notIn,omitempty"`
	Exists   any `json:"exists,omitempty"`
	Like     any `json:"like,omitempty"`
	Contains any `json:"contains,omitempty"`
	Gt       any `json:"gt,omitempty"`
	Gte      any `json:"gte,omitempty"`
	Lt       any `json:"lt,omitempty"`
	Lte      any `json:"lte,omitempty"`
}

type LoginPayload struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Media struct {
	ID  string  `json:"id"`
	Alt *string `json:"alt,omitempty"`
	URL *string `json:"url,omitempty"`
}

type Mutation struct {
}

type NewOrder struct {
	Name  string          `json:"name"`
	Items []*NewOrderItem `json:"items"`
}

type NewOrderItem struct {
	UserID    string  `json:"userId"`
	ProductID string  `json:"productId"`
	Quantity  int     `json:"quantity"`
	Note      *string `json:"note,omitempty"`
}

type NewProduct struct {
	Name        string            `json:"name"`
	Price       float64           `json:"price"`
	Description *string           `json:"description,omitempty"`
	Images      []*graphql.Upload `json:"images,omitempty"`
}

type Order struct {
	ID        string       `json:"id"`
	CreatedBy *User        `json:"createdBy"`
	Items     []*OrderItem `json:"items"`
	Total     float64      `json:"total"`
}

type OrderAndInput struct {
	And []*OrderFilterInput `json:"and,omitempty"`
}

type OrderFilterInput struct {
	ID    *FieldFilterInput `json:"id,omitempty"`
	Total *FieldFilterInput `json:"total,omitempty"`
}

type OrderFiltersInput struct {
	Where []*OrderOrInput `json:"where,omitempty"`
}

type OrderItem struct {
	ID       string   `json:"id"`
	User     *User    `json:"user"`
	Product  *Product `json:"product"`
	Quantity int      `json:"quantity"`
	Subtotal float64  `json:"subtotal"`
	Note     *string  `json:"note,omitempty"`
}

type OrderOrInput struct {
	Or []*OrderAndInput `json:"or,omitempty"`
}

type PaginatedProducts struct {
	Items []*Product `json:"items,omitempty"`
	Count *int       `json:"count,omitempty"`
	Page  *int       `json:"page,omitempty"`
	Limit *int       `json:"limit,omitempty"`
}

type Product struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Price       float64    `json:"price"`
	Description *string    `json:"description,omitempty"`
	Status      *string    `json:"status,omitempty"`
	CreatedAt   *time.Time `json:"createdAt,omitempty"`
	UpdatedAt   *time.Time `json:"updatedAt,omitempty"`
}

type ProductAndInput struct {
	And []*ProductFilterInput `json:"and,omitempty"`
}

type ProductFilterInput struct {
	ID          *FieldFilterInput `json:"id,omitempty"`
	Name        *FieldFilterInput `json:"name,omitempty"`
	Price       *FieldFilterInput `json:"price,omitempty"`
	Description *FieldFilterInput `json:"description,omitempty"`
	CreatedAt   *FieldFilterInput `json:"createdAt,omitempty"`
}

type ProductFiltersInput struct {
	Where *ProductOrInput `json:"where,omitempty"`
}

type ProductOrInput struct {
	Or []*ProductAndInput `json:"or,omitempty"`
}

type Query struct {
}

type SignUpPayload struct {
	Email           string `json:"email"`
	Password        string `json:"password"`
	ConfirmPassword string `json:"confirmPassword"`
}

type Subscription struct {
}
